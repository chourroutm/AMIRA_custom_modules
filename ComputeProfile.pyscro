# -*- coding: utf-8 -*-
from scipy import *
import numpy as np
from pathlib import Path
import re
import pandas as pd
class ComputeProfile(PyScriptObject):
    def __init__(self):
        """
        Compute attenuation profile along one axis.
        """
        self.name = "Compute Profile"
        self.do_it = HxPortDoIt(self, 'apply', 'Apply')

        self.data.visible = True
        self.data.label = "Data"
        self.data.valid_types = ["HxUniformScalarField3"]

        self.roi = HxConnection(self)
        self.roi.name ="ROI"
        self.roi.label ="ROI"
        self.roi.visible = True
        self.roi.valid_types = ["HxSelectRoi"]
        
        self.locale_options = HxPortMultiMenu(self)
        self.locale_options.menus = [
            HxPortButtonMenu.Menu(options=["Comma ',' as delimiter", "Semicolon ';' as delimiter", "Tabulation as delimiter"]),
            HxPortButtonMenu.Menu(options=["Dot '.' as decimal separator", "Comma ',' as decimal separator"]),
        ]
        self.locale_options.name ="LocaleOptions"
        self.locale_options.label ="Locale Options"
        self.locale_options.visible = True
        self.locale_options.position = 1
        
        self.profile_type = HxPortRadioBox(self)
        self.profile_type.radio_boxes = [
          HxPortRadioBox.RadioBox(label="Mean Intensity"),
          HxPortRadioBox.RadioBox(label="Mean Gradient"),
          HxPortRadioBox.RadioBox(label="Gradient of Mean Intensity"),
        ]
        self.profile_type.name ="ProfileType"
        self.profile_type.label ="Profile Type"
        self.profile_type.visible = True
        self.profile_type.position = 1
        
        self.direction = HxPortRadioBox(self)
        self.direction.radio_boxes = [
          HxPortRadioBox.RadioBox(label="X"),
          HxPortRadioBox.RadioBox(label="Y"),
          HxPortRadioBox.RadioBox(label="Z"),
        ]
        self.direction.name ="Axis"
        self.direction.label ="Axis"
        self.direction.visible = True
        self.direction.position = 2
        
        self.profile_output = HxPortFilename(self)
        self.profile_output.name ="FileToSave"
        self.profile_output.label ="Profile Output"
        self.profile_output.visible = True
        self.profile_output.mode = HxPortFilename.ANY_FILE
        self.profile_output.registerfiletype('Delimiter-separated values','csv:tab:dsv:ssv',0)
        self.direction.position = 1
        
        # self.directions = HxPortMultiMenu(self)
        # self.options.menus = [
        #     HxPortButtonMenu.Menu(options=["Auto-detect format", "8-bit unsigned int", "8-bit RGB", "16-bit unsigned int", "16-bit signed int", "32-bit signed int", "32-bit float", "64-bit float"]),
        #     HxPortButtonMenu.Menu(options=["Little endian", "Big endian"]),
        #     HxPortButtonMenu.Menu(options=["X fastest", "Z fastest"])
        # ]
        # self.options.name ="Options"
        # self.options.label ="Options"
        # self.options.visible = True
        # self.options.position = 1

    def update(self):
        pass

    def compute(self):
        # Check if module is applied
        if not self.do_it.was_hit:
            return
        # Check if input data is connected
        if ( not self.data.connected or not self.roi.connected):
            hx_message.error("Please provide all inputs.")
            return
            
        with hx_progress.progress(4,"Configuring profile...") as progress:
        
            list_of_delimiters = [",",";","\t"]
            select_delimiter = self.locale_options.menus[0]
            delimiter = list_of_delimiters[select_delimiter.selected]
            
            list_of_decimal_separators = [".",","]
            select_decimal_separator = self.locale_options.menus[1]
            decimal_separator = list_of_decimal_separators[select_decimal_separator.selected]
        
            hx_roi = self.roi.source()
            hx_data = self.data.source()
            
            progress.increase_progress_step()
            progress.set_text("Extracting ROI...")
            
            hx_extract = hx_object_factory.create('HxLatticeAccess')
            hx_extract.ports.ROI.connect(hx_roi)
            hx_extract.ports.data.connect(hx_data)
            hx_extract.execute()
            
            progress.increase_progress_step()
            progress.set_text("Passing data to Python...")
            
            sublattice = hx_extract.results[0]
            sublattice_array = sublattice.get_array().astype(np.double)
            sublattice_array[sublattice_array == 0] = np.nan
            
            progress.increase_progress_step()
            progress.set_text("Computing profile...")
            
            multiple_axes = list(range(0,3))
            multiple_axes.remove(self.direction.selected)
            
            positions = np.linspace(sublattice.bounding_box[0][self.direction.selected],sublattice.bounding_box[1][self.direction.selected],sublattice_array.shape[self.direction.selected])
            
            if self.profile_type.selected == 0:
                try:
                    profile = np.nanmean(sublattice_array,axis=tuple(multiple_axes))
                except RuntimeWarning:
                    pass
                
                progress.increase_progress_step()
                progress.set_text("Generating profile file...")
                # dictionary of lists
                dict = {'positions_mm': positions, 'profile_intensity': profile}
            elif self.profile_type.selected == 2:
                try:
                    profile = np.nanmean(sublattice_array,axis=tuple(multiple_axes))
                except RuntimeWarning:
                    pass
                profile_gradient = np.gradient(profile, positions, axis=self.direction.selected, edge_order=2)
                
                progress.increase_progress_step()
                progress.set_text("Generating profile file...")
                # dictionary of lists
                dict = {'positions_mm': positions, 'profile_gradient': profile_gradient}
            else:
                profile_gradients = np.gradient(sublattice_array, positions, axis=self.direction.selected, edge_order=2)
                try:
                    profile_gradients_mean = np.nanmean(profile_gradients,axis=tuple(multiple_axes))
                except RuntimeWarning:
                    pass
                progress.increase_progress_step()
                progress.set_text("Generating profile file...")
                # dictionary of lists
                dict = {'positions_mm': positions, 'profile_gradients_mean': profile_gradients_mean}
                
            df = pd.DataFrame(dict)

            # saving the dataframe
            df.to_csv(self.profile_output.filenames, sep=delimiter, decimal=decimal_separator, index=False)

        return True

class WrongDimError(Exception):
    """No compatible format detected."""
    pass
